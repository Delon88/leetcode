package LC.SOL;

import java.util.Arrays;

public class MinimizeMalwareSpread {
    class Solution {

        int[] par;

        public int minMalwareSpread(int[][] graph, int[] initial) {
            int n = graph.length;
            par = new int[n];
            for (int i = 0; i < n; i++) par[i] = i;
            for (int i = 0; i < n; i++) {
                for (int j = i + 1; j < n; j++) {
                    if (graph[i][j] == 1) union(i, j);
                }
            }
            int[] ufSize = new int[n];
            int[] malSize = new int[n];
            for (int i = 0; i < n; i++) ufSize[find(i)]++;
            for (int i : initial) malSize[find(i)]++;
            int ret = -1;
            int maxSize = 0;
            Arrays.sort(initial);
            for (int i : initial) {
                int root = find(i);
                if (malSize[root] == 1 && ufSize[root] > maxSize) {
                    maxSize = ufSize[root];
                    ret = i;
                }
            }
            if (maxSize != 0) return ret;
            else return initial[0];
        }


        int find(int i) {
            while (i != par[i]) {
                par[i] = par[par[i]];
                i = par[i];
            }
            return i;
        }

        void union(int i, int j) {
            par[find(i)] = par[find(j)];
        }
    }
}
