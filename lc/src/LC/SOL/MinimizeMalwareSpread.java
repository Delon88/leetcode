package LC.SOL;

import java.util.Arrays;

public class MinimizeMalwareSpread {
    class Solution {

        int[] id;
        public int minMalwareSpread(int[][] graph, int[] initial) {
            int n = graph.length;
            id = new int[n];
            for ( int i = 0 ; i < n ; i++) id[i] = i;
            for ( int i = 0 ; i < n ; i++) {
                for ( int j = i + 1 ; j < n ; j++) {
                    if ( graph[i][j] == 1 ) id[find(i)] = id[find(j)];
                }
            }
            int[] comSize = new int[n];
            int[] malSize = new int[n];
            for ( int i = 0 ; i < n ; i++) comSize[find(i)]++;
            for ( int i : initial) malSize[find(i)]++;
            Arrays.sort(initial);
            int ret = -1;
            int maxCom = 0;
            for ( int i : initial) {
                int root = find(i);
                if ( malSize[root] == 1 && comSize[root] > maxCom) {
                    ret = i;
                    maxCom = comSize[root];
                }
            }
            return maxCom == 0 ? initial[0] : ret;
        }

        int find(int i) {
            while ( i != id[i]) {
                id[i] = id[id[i]];
                i = id[i];
            }
            return i;
        }
    }
}
