package LC.SOL;

import java.util.*;

public class MinimizeMalwareSpreadII {
    class Solution {
        public int minMalwareSpread(int[][] graph, int[] initial) {
            // bfs find nodes infected once:safe node
            // map->(node, infected node)
            //
            Map<Integer, List<Integer>> map = new HashMap<>();
            for (int i : initial) {
                Set<Integer> v = getVisited(initial);
                Queue<Integer> q = new LinkedList<>();
                q.add(i);
                while (!q.isEmpty()) {
                    int node = q.poll();
                    for (int j = 0; j < graph.length; j++) {
                        if (graph[node][j] == 1 && v.add(j)) {
                            q.offer(j);
                            if (!map.containsKey(j)) map.put(j, new ArrayList<>());
                            map.get(j).add(i);
                        }
                    }
                }
            }
            int[] res = new int[graph.length];
            for (int node : map.keySet()) {
                if (map.get(node).size() == 1) {
                    res[map.get(node).get(0)]++;
                }
            }

            int max = 0;
            int ret = -1;
            for (int i = 0; i < graph.length; i++) {
                if (res[i] > max) {
                    max = res[i];
                    ret = i;
                }
            }
            Arrays.sort(initial);
            return ret == -1 ? initial[0] : ret;
        }

        private Set<Integer> getVisited(int[] ins) {
            Set<Integer> set = new HashSet<>();
            for (int i : ins) set.add(i);
            return set;
        }
    }
}
